{
  "name": "APIM API ERROR PERCENTAGES",
  "id": "APIMApiErrorPercentages",
  "thumbnailURL": "", 
  "configs": {
    "pubsub": {
      "types": ["subscriber"]
    },
    "providerConfig" : {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name('APIM_ERROR_SUMMARY') define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string, apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string); @store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='72 hours', hours='90 days', days='1 year', months='2 years', years='3 years')) define aggregation ApiErroranalysisAgg from Request select apiName, apiVersion, apiMethod, apiResourceTemplate, responseCode, apiContext, sum(backendLatency) as backendLatency, sum(otherLatency) as otherLatency, sum(responseTime) as responseLatency, count() as totalRequestCount, apiCreator, apiCreatorTenantDomain, applicationName, label group by apiName, apiVersion, responseCode, apiResourceTemplate aggregate by requestTimestamp every seconds...years;",
          "queryData": {
            "totalerrorcountQuery": "from ApiErroranalysisAgg on (apiCreatorTenantDomain=='{{tenantDomain}}' AND responseCode > 399) within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, apiVersion, sum(totalRequestCount) as counts group by apiName, apiVersion;",
            "totalReqCountQuery": "from ApiErroranalysisAgg on apiCreatorTenantDomain=='{{tenantDomain}}' within {{from}}L, {{to}}L per \"{{per}}s\" select apiName, apiVersion, sum(totalRequestCount) as counts group by apiName, apiVersion;"
          },
          "publishingInterval": 60
        }
      }
    },
    "options": [
      {
        "id": "header",
        "title": "Header",
        "type": {
          "name": "BOOLEAN",
          "possibleValues": [
            true,
            false
          ]
        },
        "defaultValue": true
      },
      {
        "id": "headerTitle",
        "title": "Widget Title",
        "type": {
          "name": "TEXT"
        },
        "defaultValue": "Api Error Percentages"
      }
    ]
  }
}
