{
  "name": "APIM API FAULT ANALYSIS",
  "id": "APIMApiErrorAnalysis",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": ["subscriber"]
    },
    "providerConfig" : {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name('APIMApiLatencyTimeSiddhi') define stream Request (meta_clientType string, applicationConsumerKey string, applicationName string, applicationId string, applicationOwner string, apiContext string,apiName string, apiVersion string, apiResourcePath string, apiResourceTemplate string, apiMethod string, apiCreator string, apiCreatorTenantDomain string, apiTier string, apiHostname string, username string, userTenantDomain string, userIp string, userAgent string, requestTimestamp long, throttledOut bool, responseTime long, serviceTime long, backendTime long, responseCacheHit bool, responseSize long, protocol string, responseCode int, destination string, securityLatency long, throttlingLatency long, requestMedLat long, responseMedLat long, backendLatency long, otherLatency long, gatewayType string, label string); @primaryKey('API_ID') @store(type=\"rdbms\" , datasource=\"AM_DB\") define table AM_API(API_ID int,API_PROVIDER string,API_NAME string,API_VERSION string,CONTEXT string,CONTEXT_TEMPLATE string,API_TIER string,CREATED_BY string,CREATED_TIME string,UPDATED_BY string,UPDATED_TIME string);  @primaryKey('URL_MAPPING_ID') @store(type=\"rdbms\" , datasource=\"AM_DB\") define table AM_API_URL_MAPPING(URL_MAPPING_ID int,API_ID int,HTTP_METHOD string,AUTH_SCHEME string,URL_PATTERN string,THROTTLING_TIER string,MEDIATION_SCRIPT string); @store(type = 'rdbms', datasource = 'APIM_ANALYTICS_DB') @purge(enable='true', interval='60 min', @retentionPeriod(sec='1 day', min='7 days', hours='90 days', days='1 year', months='2 years', years='3 years')) define aggregation ApiErroranalysisAgg from Request select apiName, apiVersion, apiMethod, apiResourceTemplate, responseCode, apiContext, sum(backendLatency) as backendLatency, sum(otherLatency) as otherLatency, sum(responseTime) as responseLatency, count() as totalRequestCount, apiCreator, apiCreatorTenantDomain, applicationName, label group by apiName, apiVersion, responseCode, apiResourceTemplate aggregate by requestTimestamp every seconds...years;",
          "queryData": {
            "apiidquery": "from AM_API on {{apiCondition}} select API_ID,API_NAME,API_VERSION,API_PROVIDER;",
            "resourcequery": "from AM_API_URL_MAPPING on API_ID=={{apiID}} select URL_PATTERN,HTTP_METHOD;",
            "mainquery":"from ApiErroranalysisAgg on (apiCreatorTenantDomain=='{{tenantDomain}}' AND {{querystring}} AND responseCode > 399) within {{timeFrom}}L, {{timeTo}}L per \"{{per}}s\" select responseCode,AGG_TIMESTAMP,apiResourceTemplate,sum(totalRequestCount) as counts group by AGG_TIMESTAMP, responseCode having  str:charFrequency(apiResourceTemplate,',') == {{numberOfCommas}} order by AGG_TIMESTAMP;"
          },
          "publishingInterval": 60
        }
      }
    },
    "options": [
      {
        "id": "header",
        "title": "Header",
        "type": {
          "name": "BOOLEAN",
          "possibleValues": [
            true,
            false
          ]
        },
        "defaultValue": true
      },
      {
        "id": "headerTitle",
        "title": "Widget Title",
        "type": {
          "name": "TEXT"
        },
        "defaultValue": "API Error Analysis"
      }
    ]
  }
}
